
Name: Aleksander Binion
CNET: biniona
Assignment: HW5 - HMM Part 3

Python version : Python 3.6.3 :: Anaconda, Inc.

Contains: 

	HMM.py, forwardBackward.py, output.py, state.py, softCount.py, updateTables.py, sort.py, HMM-transitionSquare.py.

	NOTE: 2words.txt and english1000.txt are text files for testing. 

- Usage: 

	"python HMM.py -f english1000.txt" the -f flag specializes corpus file and the -v flag is optional and specified verbose output. I added a new -i flag followed by an integer that specifies the number of iterations. If no input is put for this flag the number of iterations is set to 50. 

	There is also the file HMM-transitionSquare.py which is identical to HMM.py except runs HMM.py 100 times to determine the best starting transition values to minimize the total plog of the data set. 

- ANSWER TO PART 4 OF THE HOMEWORK ASSIGNMENT: 

	- The starting transition values of a that best figure out something about the data have a higher probability of transitioning to the other state than staying in the current state. This means that the initial A (transition) values in the HMM should have each state have a higher probability that it will transition to the other state than stay in the same state. I attached the 10X10 transition value square I generated below the comments section.  

- Comments: 

	The main code for HMM 3 is in HMM.py. All of the code for soft counts is in softCount.py, and all the maximization code is in updateTables.py. forwardBackward.py contains the code for forward backward probability calculation and summation, output.py contains helper print functions for verbose output, and state.py contains a definition of the state class (used throughout all other files).


SORTED TRANSITION PROBABILITY SQUARE :

[(0.3, 0.7), (0.5, 0.5), 23820.335713337157]
[(0.1, 0.9), (0.8, 0.2), 23857.251581004828]
[(0.3, 0.7), (0.7, 0.3), 23903.95190329488]
[(0.3, 0.7), (0.8, 0.2), 23906.548007221827]
[(0.2, 0.8), (0.5, 0.5), 23914.616204259528]
[(0.4, 0.6), (0.8, 0.2), 23919.752626535606]
[(0.1, 0.9), (0.6, 0.4), 23935.90991431908]
[(0.4, 0.6), (0.9, 0.1), 23937.22808556584]
[(0.3, 0.7), (0.6, 0.4), 23977.56047377017]
[(0.6, 0.4), (0.9, 0.1), 23985.927208740133]
[(0.1, 0.9), (0.1, 0.9), 24022.636020093756]
[(0.2, 0.8), (0.2, 0.8), 24033.018540775196]
[(0.6, 0.4), (0.8, 0.2), 24034.46945335662]
[(0.7, 0.3), (0.8, 0.2), 24040.709194667386]
[(0.1, 0.9), (0.7, 0.3), 24088.064830110394]
[(0.1, 0.9), (0.9, 0.1), 24097.416573409344]
[(0.2, 0.8), (0.4, 0.6), 24115.418362194592]
[(0.4, 0.6), (0.6, 0.4), 24121.092000674736]
[(0.2, 0.8), (0.9, 0.1), 24121.67468877829]
[(0.2, 0.8), (0.8, 0.2), 24137.042928632665]
[(0.4, 0.6), (0.7, 0.3), 24153.70773721102]
[(0.2, 0.8), (0.7, 0.3), 24202.679487531543]
[(0.1, 0.9), (0.4, 0.6), 24231.795809649935]
[(0.5, 0.5), (0.9, 0.1), 24288.614955091445]
[(0.1, 0.9), (0.5, 0.5), 24293.801804791245]
[(0.6, 0.4), (0.7, 0.3), 24297.609359978815]
[(0.2, 0.8), (0.3, 0.7), 24315.653936193226]
[(0.3, 0.7), (0.9, 0.1), 24325.356336996636]
[(0.5, 0.5), (0.7, 0.3), 24347.198059470742]
[(0.1, 0.9), (0.2, 0.8), 24406.599625771425]
[(0.5, 0.5), (0.8, 0.2), 24415.767341535477]
[(0.8, 0.2), (0.2, 0.8), 24419.819600180574]
[(0.6, 0.4), (0.3, 0.7), 24426.419585270418]
[(0.2, 0.8), (0.1, 0.9), 24428.948259677116]
[(0.7, 0.3), (0.9, 0.1), 24433.24749733079]
[(0.9, 0.1), (0.2, 0.8), 24460.366648678675]
[(0.5, 0.5), (0.6, 0.4), 24464.357236440726]
[(0.6, 0.4), (0.2, 0.8), 24476.51456743369]
[(0.1, 0.9), (0.3, 0.7), 24488.695655402003]
[(0.9, 0.1), (0.3, 0.7), 24502.818181573788]
[(0.7, 0.3), (0.3, 0.7), 24519.863460669698]
[(0.2, 0.8), (0.6, 0.4), 24550.17187113703]
[(0.6, 0.4), (0.4, 0.6), 24550.55428927566]
[(0.8, 0.2), (0.8, 0.2), 24551.98292484402]
[(0.7, 0.3), (0.4, 0.6), 24557.118359931726]
[(0.8, 0.2), (0.9, 0.1), 24561.41302150281]
[(0.3, 0.7), (0.4, 0.6), 24571.9351496245]
[(0.5, 0.5), (0.1, 0.9), 24592.6667867996]
[(0.4, 0.6), (0.5, 0.5), 24597.41529580054]
[(0.8, 0.2), (0.4, 0.6), 24631.120752197345]
[(0.4, 0.6), (0.3, 0.7), 24636.011739226975]
[(0.7, 0.3), (0.1, 0.9), 24636.9646177074]
[(0.5, 0.5), (0.3, 0.7), 24644.429884698504]
[(0.9, 0.1), (0.8, 0.2), 24647.809771602]
[(0.6, 0.4), (0.1, 0.9), 24648.11338905813]
[(0.5, 0.5), (0.2, 0.8), 24648.59724092677]
[(0.8, 0.2), (0.1, 0.9), 24663.26850637374]
[(0.4, 0.6), (0.1, 0.9), 24666.08339026296]
[(0.4, 0.6), (0.2, 0.8), 24676.005215688216]
[(0.7, 0.3), (0.5, 0.5), 24679.41189815432]
[(0.3, 0.7), (0.3, 0.7), 24696.344250353504]
[(0.7, 0.3), (0.2, 0.8), 24703.721727297616]
[(0.9, 0.1), (0.6, 0.4), 24703.75587604155]
[(0.8, 0.2), (0.3, 0.7), 24704.083103827983]
[(0.9, 0.1), (0.1, 0.9), 24704.48781298234]
[(0.5, 0.5), (0.4, 0.6), 24706.49560507583]
[(0.8, 0.2), (0.6, 0.4), 24708.276736289747]
[(0.8, 0.2), (0.7, 0.3), 24710.017677097298]
[(0.6, 0.4), (0.6, 0.4), 24714.443952825015]
[(0.9, 0.1), (0.5, 0.5), 24720.45156782399]
[(0.9, 0.1), (0.7, 0.3), 24721.413408503868]
[(0.7, 0.3), (0.6, 0.4), 24732.7481663934]
[(0.3, 0.7), (0.2, 0.8), 24740.381447157393]
[(0.4, 0.6), (0.4, 0.6), 24765.690231129964]
[(0.9, 0.1), (0.4, 0.6), 24767.674004022945]
[(0.9, 0.1), (0.9, 0.1), 24768.99183296438]
[(0.8, 0.2), (0.5, 0.5), 24771.142796969034]
[(0.6, 0.4), (0.5, 0.5), 24785.613843220166]
[(0.3, 0.7), (0.1, 0.9), 24798.305623961343]
[(0.5, 0.5), (0.5, 0.5), 24798.92630088846]
[(0.7, 0.3), (0.7, 0.3), 24828.125531332345]

